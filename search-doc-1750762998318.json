{"searchDocs":[{"title":"第一条帖子","type":0,"sectionRef":"#","url":"/blog/post1","content":"✨ 欢迎来到本站的第一篇帖子！🎉 如果你不嫌麻烦，欢迎翻到页面最底部，点击「显示评论」按钮 👉 登录一下，留言「到此一游」，让我知道你来过","keywords":"","version":null},{"title":"📦 安装 Yuml","type":0,"sectionRef":"#","url":"/docs/install","content":"","keywords":"","version":"Next"},{"title":"使用 Git 克隆安装​","type":1,"pageTitle":"📦 安装 Yuml","url":"/docs/install#使用-git-克隆安装","content":" Yuml 当前仍处于测试阶段，尚未发布至 PyPI，建议通过 Git 克隆源代码来使用：  ","version":"Next","tagName":"h2"},{"title":"克隆仓库​","type":1,"pageTitle":"📦 安装 Yuml","url":"/docs/install#克隆仓库","content":" git clone https://github.com/xYuan20d/Yuml.git cd Yuml   ","version":"Next","tagName":"h3"},{"title":"安装依赖​","type":1,"pageTitle":"📦 安装 Yuml","url":"/docs/install#安装依赖","content":" pip install -r requirements.txt   警告 请确保你已安装 Python 3.10 或以上版本。 ","version":"Next","tagName":"h3"},{"title":"Yuml简介","type":0,"sectionRef":"#","url":"/docs/intro","content":"","keywords":"","version":"Next"},{"title":"🧠 什么是 Yuml？​","type":1,"pageTitle":"Yuml简介","url":"/docs/intro#-什么是-yuml","content":" Yuml 是一个基于 YAML 语法结构构建的声明式 UI 和元编程语言，它的设计理念是：  摆脱 HTML + JS 的限制，实现全平台可嵌入的数据交互式编程体验  类似 XML/HTML 的结构，但具备控制流、模块系统、动态表达式等能力。既可以用来写页面 UI，也可以作为逻辑脚本语言运行。支持 Python、Lua 的无缝嵌入，也能完全脱离传统语言独立运行。  ","version":"Next","tagName":"h2"},{"title":"🔥 特点一览​","type":1,"pageTitle":"Yuml简介","url":"/docs/intro#-特点一览","content":" ✅ 事件驱动编程✅ 模块系统（可导入依赖包和组件）✅ 全局变量、作用域、数据绑定机制✅ 字符串模板渲染（{&lt; &gt;} / {&lt;&lt; &gt;&gt;} 支持表达式嵌入）✅ 插件化机制，支持扩展组件、拖拽式可视化编辑✅ 支持控制流（if / for / break / continue）✅ 自定义语法指令  ","version":"Next","tagName":"h2"},{"title":"简单示例​","type":1,"pageTitle":"Yuml简介","url":"/docs/intro#简单示例","content":" 你可以像写 YAML 一样写 UI 元素，也可以写函数、变量、模块：  run: \\&gt;hello_world: &quot;Hello World!&quot; LOG: &quot;{&lt; hello_world &gt;}&quot; # 输出Hello World!  ","version":"Next","tagName":"h2"},{"title":"Yuml Python API 简介","type":0,"sectionRef":"#","url":"/docs/使用教程/python_api","content":"","keywords":"","version":"Next"},{"title":"主要 API​","type":1,"pageTitle":"Yuml Python API 简介","url":"/docs/使用教程/python_api#主要-api","content":" ","version":"Next","tagName":"h2"},{"title":"类 LoadYmlFile​","type":1,"pageTitle":"Yuml Python API 简介","url":"/docs/使用教程/python_api#类-loadymlfile","content":" LoadYmlFile( file_name: str, # Yuml 文件路径 app: QApplication, # Qt 应用实例 load_str: bool = False, # 是否加载字符串内容，默认 False is_module: bool = False, # 是否作为模块加载，默认 False _p: QWidget | None = None # 父窗口指针，默认 None )   ","version":"Next","tagName":"h3"},{"title":"示例​","type":1,"pageTitle":"Yuml Python API 简介","url":"/docs/使用教程/python_api#示例","content":" from PySide6.QtWidgets import QApplication from os import environ environ[&quot;__YuQt_WindowStyle&quot;] = &quot;YW_root&quot; # 设置窗口样式，必须在导入 Yuml 之前 from YUML.Yuml import LoadYmlFile app = QApplication([]) # 加载 Yuml 文件，启动应用 LoadYmlFile(&quot;main.yaml&quot;, app) # 请勿使用`app.exec()`, 可在Yuml中使用$app::run来代替!  ","version":"Next","tagName":"h3"},{"title":"🌱 根节点与事件机制","type":0,"sectionRef":"#","url":"/docs/使用教程/events","content":"","keywords":"","version":"Next"},{"title":"📦 什么是块（函数）​","type":1,"pageTitle":"🌱 根节点与事件机制","url":"/docs/使用教程/events#-什么是块函数","content":" Yuml 不使用传统的 function 或 def 等关键字来声明函数， 而是通过判断块名是否与事件名重名，来区分：  事件块：系统自动触发执行自定义块：需要手动调用，作为通用逻辑复用结构  ","version":"Next","tagName":"h2"},{"title":"✨ 示例​","type":1,"pageTitle":"🌱 根节点与事件机制","url":"/docs/使用教程/events#-示例","content":" windowCreated: windowSize: {width: 800, height: 600} CALL_BLOCK: testBlock testBlock: LOG: &quot;块被调用&quot;   说明：  windowCreated 是一个与事件同名的块 → 会在窗口创建时被系统自动触发testBlock 是一个自定义逻辑块 → 需要通过 CALL_BLOCK 主动调用  提示 避免将自定义块命名为下列系统事件名，否则它将会被识别为事件块，无法被正常复用。 自定义块常用于组织业务逻辑，支持被 callBlock / CALL_BLOCK 等元素调用。    ","version":"Next","tagName":"h3"},{"title":"⚙️ 常见事件块一览（自动触发）​","type":1,"pageTitle":"🌱 根节点与事件机制","url":"/docs/使用教程/events#️-常见事件块一览自动触发","content":" 事件名\t触发时机windowCreated\t当窗口首次 show() 时触发 windowShowed\t当窗口被显示（从隐藏变可见）时 windowHidden\t当窗口被隐藏 windowResized\t当窗口尺寸发生变化时触发 windowMoved\t当窗口被移动时触发 windowClosed\t用户点击关闭按钮时触发  事件块的结构与普通块完全一致，唯一区别是： 事件块会被系统自动调用，无需你手动调用。    如需定义你自己的事件响应逻辑，只需新建一个块，命名为以上事件名之一即可。 ","version":"Next","tagName":"h2"},{"title":"Yuml 独有的基本概念","type":0,"sectionRef":"#","url":"/docs/使用教程/concept","content":"","keywords":"","version":"Next"},{"title":"1. 块（Block）与元素（Element）​","type":1,"pageTitle":"Yuml 独有的基本概念","url":"/docs/使用教程/concept#1-块block与元素element","content":" 在 Yuml 中，每个根节点（Root）下都是一个“块”（Block）。块是 Yuml 的基本代码结构单元，用于封装逻辑、组件或数据内容。  ","version":"Next","tagName":"h2"},{"title":"示例​","type":1,"pageTitle":"Yuml 独有的基本概念","url":"/docs/使用教程/concept#示例","content":" a: _: 1 b: _: 1 _2: 1   上例中，a 和 b 都是块，分别称为「a 块」和「b 块」。每个块中的键值对称为元素（Element）。a 块中包含一个元素：_，值为 1。b 块中包含两个元素：_ 和 _2，值均为 1。  ","version":"Next","tagName":"h3"},{"title":"组件元素​","type":1,"pageTitle":"Yuml 独有的基本概念","url":"/docs/使用教程/concept#组件元素","content":" 参考: 块的语义构成    ","version":"Next","tagName":"h3"},{"title":"2. Globals（全局变量）​","type":1,"pageTitle":"Yuml 独有的基本概念","url":"/docs/使用教程/concept#2-globals全局变量","content":" Globals 是 Yuml 中最核心的概念之一。 它的设计理念是：在一个地方设置后，整个系统中所有语言层都可以同步访问。  这意味着，无论是 YAML 脚本本身，还是 Python、Lua 等脚本语言，都可以共享访问同一个变量。  ","version":"Next","tagName":"h2"},{"title":"🔄 多语言同步示例​","type":1,"pageTitle":"Yuml 独有的基本概念","url":"/docs/使用教程/concept#-多语言同步示例","content":" 以下示例展示了如何通过 Globals 实现变量在多个语言环境中的共享：  \\&gt;a: 1 LOG: &quot;{&lt; a &gt;}&quot; PythonScript: &quot;print(a)&quot; LuaScript: &quot;print(a)&quot;   输出：  1 1 1   在上例中，\\&gt;a: 1 定义了一个名为 a 的全局变量：  {&lt; a &gt;} 用于字符串渲染引擎中访问 aPython 和 Lua 脚本中直接访问同名变量 a，无需额外传参  ","version":"Next","tagName":"h3"},{"title":"💡 其他创建 Globals 的方式​","type":1,"pageTitle":"Yuml 独有的基本概念","url":"/docs/使用教程/concept#-其他创建-globals-的方式","content":" HOOK 元素在执行时也会创建对应的全局变量某些组件行为、回调处理等也可能隐式地将变量注入为 Globals  ","version":"Next","tagName":"h3"},{"title":"🧹 生命周期与管理​","type":1,"pageTitle":"Yuml 独有的基本概念","url":"/docs/使用教程/concept#-生命周期与管理","content":" Globals 的生命周期 贯穿整个应用运行期间，不会自动销毁若需要手动清除变量，可使用 DELETE 元素进行删除：  DELETE: - a   ","version":"Next","tagName":"h3"},{"title":"📘 延伸阅读​","type":1,"pageTitle":"Yuml 独有的基本概念","url":"/docs/使用教程/concept#-延伸阅读","content":" 字符串渲染引擎中的 {&lt; a &gt;} 表达式同样依赖 Globals 提供变量支持，详见： 字符串渲染引擎  掌握 Globals 是 Yuml 编程的入门基础，也是数据交互的核心机制之一。 ","version":"Next","tagName":"h3"},{"title":"🧱 Yuml 元素机制详解 (main_block)","type":0,"sectionRef":"#","url":"/docs/使用教程/mainBlocks","content":"","keywords":"","version":"Next"},{"title":"🧩 块的语义构成​","type":1,"pageTitle":"🧱 Yuml 元素机制详解 (main_block)","url":"/docs/使用教程/mainBlocks#-块的语义构成","content":" 每个块的结构如下：  块名: 元素名: 参数  其中：  块名 是根节点，用于标识一个 Block；元素名 是具体要执行的功能；参数 是对应的配置或调用参数。    ","version":"Next","tagName":"h2"},{"title":"🧩 cw控制器​","type":1,"pageTitle":"🧱 Yuml 元素机制详解 (main_block)","url":"/docs/使用教程/mainBlocks#-cw控制器","content":" 在 Yuml 中，所有组件类元素（如按钮、输入框、标签等）并不由 main_block 直接处理，而是交由一个名为 cw 的内部控制器负责构建与管理。  cw控制器是 Yuml 框架的 组件调度中心，它：  封装了常用组件的创建逻辑（如 button, label, listBox, input 等）；统一处理每个组件中的组件元素（如 show, onClicked, size, QssStyle 等）；实现了组件逻辑的解耦与复用，保证每类组件的独立行为和生命周期管理。  当你在 Yuml 中写下如下内容时：  button: myButton: show: true onClicked: sayHello   main_block 会调用 cw.button(...) 来创建 QPushButton，并将 show、onClicked 等组件元素委托给 cw控制器 进一步解析和执行。  通过 cw控制器，Yuml可以轻松处理组件插件扩展等。  ","version":"Next","tagName":"h2"},{"title":"⚙️ 支持的元素与功能​","type":1,"pageTitle":"🧱 Yuml 元素机制详解 (main_block)","url":"/docs/使用教程/mainBlocks#️-支持的元素与功能","content":" ","version":"Next","tagName":"h2"},{"title":"📐 窗口类元素​","type":1,"pageTitle":"🧱 Yuml 元素机制详解 (main_block)","url":"/docs/使用教程/mainBlocks#-窗口类元素","content":" 元素名\t功能\t参数说明windowSize\t设置主窗口大小\twidth, height 字段 windowTitle\t设置窗口标题\t字符串 windowIcon\t设置窗口图标\t图标路径 globalStyle\t设置全局样式表（QSS）\tQSS 字符串 QssStyle\t等价于 globalStyle\t同上    ","version":"Next","tagName":"h3"},{"title":"🧱 基础 UI 元素（由 cw 控制器处理）​","type":1,"pageTitle":"🧱 Yuml 元素机制详解 (main_block)","url":"/docs/使用教程/mainBlocks#-基础-ui-元素由-cw-控制器处理","content":" 元素名\t功能button\t创建按钮 label\t创建标签 listBox\t创建列表框 input\t创建输入框 YUML_WIDGET\t加载子 Yuml 界面（嵌套）    ","version":"Next","tagName":"h3"},{"title":"📦 容器元素​","type":1,"pageTitle":"🧱 Yuml 元素机制详解 (main_block)","url":"/docs/使用教程/mainBlocks#-容器元素","content":" 元素名\t功能box\t创建多个 QWidget 容器并迁移内部元素    ","version":"Next","tagName":"h3"},{"title":"🧰 通用逻辑元素​","type":1,"pageTitle":"🧱 Yuml 元素机制详解 (main_block)","url":"/docs/使用教程/mainBlocks#-通用逻辑元素","content":" 元素名\t功能LOG\t控制台打印 RETURN\t返回值到外部 CALL_BLOCK\t调用其他块（支持字符串或列表） callBlock\t同上，另一种语法形式 HOOK\t执行钩子函数，将结果挂载到 hook 名 DELETE\t删除全局变量 IMPORT\t设置导入路径（用于模块/插件系统）    ","version":"Next","tagName":"h3"},{"title":"🔁 控制流结构​","type":1,"pageTitle":"🧱 Yuml 元素机制详解 (main_block)","url":"/docs/使用教程/mainBlocks#-控制流结构","content":" 元素名\t功能WHILE\t条件循环，支持 COND / CODE / ELSE FOR\t遍历结构，支持 ITER / CODE / NAME / ELSE IF\t条件判断，支持多个条件块与 ELSE 分支 CONTINUE\t跳过当前循环 BREAK\t跳出当前循环    ","version":"Next","tagName":"h3"},{"title":"🧬 脚本执行元素​","type":1,"pageTitle":"🧱 Yuml 元素机制详解 (main_block)","url":"/docs/使用教程/mainBlocks#-脚本执行元素","content":" 元素名\t功能PythonScript\t执行 Python 脚本 LuaScript\t执行 Lua 脚本 YuanGuiScript\t执行 YuanGui 自定义脚本    ","version":"Next","tagName":"h3"},{"title":"⛓️ 特殊符号块名说明​","type":1,"pageTitle":"🧱 Yuml 元素机制详解 (main_block)","url":"/docs/使用教程/mainBlocks#️-特殊符号块名说明","content":" 当块名以以下前缀符号开头时，会触发特殊语义：  前缀符号\t功能语义\\=\t设置全局变量（字符串值） \\&gt;\t设置全局变量（表达式或 .accept） \\#\t执行代码块作为 HOOK $\t调用全局变量（函数或对象链式调用）  示例：  \\=myVar: 123 \\&gt;result: &quot;1 + 2&quot; $button1::move: [[100, 100], {}]     ","version":"Next","tagName":"h3"},{"title":"组件元素和普通元素​","type":1,"pageTitle":"🧱 Yuml 元素机制详解 (main_block)","url":"/docs/使用教程/mainBlocks#组件元素和普通元素","content":" Yuml 中的元素分为 组件元素 与 普通元素：  普通元素 是由 main_block 函数直接处理的块，如 LOG、FOR、IF 等。组件元素 是 UI 组件中的子元素，统一由 cw 控制器托管。  组件元素不能在组件外部块中使用，必须定义在如 button、label 等组件块内部。  示例：  button: button1: show: true # 组件元素1 onClicked: buttonClicked # 组件元素2     ","version":"Next","tagName":"h2"},{"title":"📦 通用组件元素和专有组件元素​","type":1,"pageTitle":"🧱 Yuml 元素机制详解 (main_block)","url":"/docs/使用教程/mainBlocks#-通用组件元素和专有组件元素","content":" 组件元素分为：  通用组件元素：适用于所有组件，如 show, size, move, QssStyle；专有组件元素：只适用于特定组件，如 onClicked 是 button 独有。    ","version":"Next","tagName":"h3"},{"title":"📚 通用组件元素支持列表​","type":1,"pageTitle":"🧱 Yuml 元素机制详解 (main_block)","url":"/docs/使用教程/mainBlocks#-通用组件元素支持列表","content":" 以下为组件中通用支持的元素及功能说明：  元素名\t功能show\t控制组件显示/隐藏 move\t设置组件位置（x, y） size\t设置组件大小（width, height） X / Y\t单独设置横/纵坐标位置 width\t设置宽度 height\t设置高度 moveTo\t将组件移动到其他组件的位置 QssStyle\t设置组件样式 id\t设置组件对象名 onMoved\t绑定移动事件 styleTo\t复制另一个组件的样式、状态等 name\t重命名组件全局引用名 onList\t将组件加入指定列表（全局） darkStyle\t设置暗色主题样式 lightStyle\t设置亮色主题样式 parent\t设置父组件 delGlobals\t删除组件对应的全局引用 所有普通元素\t组件元素找不到时会从普通元素里读取  其他不在此表中的会默认从插件(包)中进行读取, 若还没有将抛出id为NoBlockError的ERROR ","version":"Next","tagName":"h2"},{"title":"字符串渲染引擎","type":0,"sectionRef":"#","url":"/docs/使用教程/string","content":"","keywords":"","version":"Next"},{"title":"核心功能​","type":1,"pageTitle":"字符串渲染引擎","url":"/docs/使用教程/string#核心功能","content":" 执行 {&lt;表达式&gt;} 中的代码，默认返回字符串。支持后缀控制返回类型： :obj —— 返回 Python 对象本身:int —— 返回整数类型（将表达式结果转换为 int）    ","version":"Next","tagName":"h2"},{"title":"详细说明​","type":1,"pageTitle":"字符串渲染引擎","url":"/docs/使用教程/string#详细说明","content":" 表达式示例：   - {&lt; 1 + 1 &gt;} → 返回字符串 &quot;2&quot; - {&lt; 1 + 1 &gt;} :int → 返回整数 2 - {&lt; 1 + 1 &gt;} :obj → 返回整数 2（Python 对象）  不会额外增加更多类型转换，避免可读性降低。 复杂类型转换建议使用 :obj，例如： - {&lt; True &gt;} :obj → True (bool 类型) - {&lt; float(1) &gt;} :obj → 1.0 (float 类型) 对象示例：   - {&lt; MyClass() &gt;} → 返回对象的字符串表示，例如 'MyClass' - {&lt; MyClass() &gt;} :obj → 返回对象实例本身 - {&lt; MyClass() &gt;} :int → 会触发 ValueError  转义表达式：   - {&lt;&lt; 1+1 &gt;&gt;} 会被转为 {&lt; 1+1 &gt;}，但不会被执行，类似 Python f-string 中的双括号转义。 - 例如：   - {&lt; 1+1 &gt;} :int → 返回 2 - {&lt;&lt; 1+1 &gt;&gt;} :int → 返回字符串 '{&lt;1+1&gt;} :int'（未执行）  多表达式处理规则：   - {&lt; a &gt;} {&lt; b &gt;} :obj → 返回最后一个表达式的结果，即 b - {&lt; 1 &gt;}{&lt; 2 &gt;} :int → 先拼接为字符串 &quot;12&quot;，再转换为整数 12 - {&lt; 1 &gt;} {&lt; 2 &gt;} :int → 因包含空格，会抛出 ValueError（无法转换 &quot;1 2&quot; 为整数）    ","version":"Next","tagName":"h2"},{"title":"使用示例​","type":1,"pageTitle":"字符串渲染引擎","url":"/docs/使用教程/string#使用示例","content":" LOG: &quot;{&lt; 1+1 &gt;}&quot;   输出： 2    该引擎是 Yuml 的核心功能之一，支持动态表达式渲染，增强了模板的灵活性和扩展性。 ","version":"Next","tagName":"h2"},{"title":"Jinja2支持","type":0,"sectionRef":"#","url":"/docs/其他/jinja2","content":"","keywords":"","version":"Next"},{"title":"🧠 为什么用 Jinja2？​","type":1,"pageTitle":"Jinja2支持","url":"/docs/其他/jinja2#-为什么用-jinja2","content":" Yuml 是声明式的语言，但并不意味着要放弃灵活性。  借助 Jinja2，你可以在静态结构中加入：  条件判断 ({% if %} / {% else %})循环语句 ({% for %})变量替换 ({{ variable }})宏函数 / include 等模板技巧    ","version":"Next","tagName":"h2"},{"title":"✨ 支持语法示例​","type":1,"pageTitle":"Jinja2支持","url":"/docs/其他/jinja2#-支持语法示例","content":" ; 会根据变量生成不同的内容 {% set show_button = true %} {{ 'BUTTON:' ~ '确认' if show_button else '提示' }} {% for i in range(3) %} LOG: 第 {{ i }} 次执行 {% endfor %}  ","version":"Next","tagName":"h2"},{"title":"🧠 Yuml 编程基础术语入门","type":0,"sectionRef":"#","url":"/docs/其他/basics","content":"","keywords":"","version":"Next"},{"title":"📌 什么是变量？​","type":1,"pageTitle":"🧠 Yuml 编程基础术语入门","url":"/docs/其他/basics#-什么是变量","content":" 变量就像一个“标签”，你可以把任意值贴在这个标签上，以便之后在程序中多次使用。  在 Yuml 中，定义变量通常使用 \\&gt;：  \\&gt;name: &quot;Yuan&quot; LOG: &quot;Hello, {&lt; name &gt;}!&quot;   这里我们把 &quot;Yuan&quot; 赋值给了变量 name后续你可以通过 {&lt; name &gt;} 来获取它的值输出结果将是：Hello, Yuan!    ","version":"Next","tagName":"h2"},{"title":"📦 什么是块（函数）？​","type":1,"pageTitle":"🧠 Yuml 编程基础术语入门","url":"/docs/其他/basics#-什么是块函数","content":" Yuml 中没有使用 function 或 def 这样的关键词定义函数， 而是把**任意顶格写的块（root 节点）**都当作一个“函数”或“逻辑单元”，我们称之为块（Block）。  greet: LOG: &quot;你好，世界！&quot;   上面的 greet 就是一个自定义块它不会自动执行，需要通过 CALL_BLOCK 来手动调用  调用示例：  windowCreated: CALL_BLOCK: greet     ","version":"Next","tagName":"h2"},{"title":"🔁 如何调用一个块？​","type":1,"pageTitle":"🧠 Yuml 编程基础术语入门","url":"/docs/其他/basics#-如何调用一个块","content":" 调用块有多种方式，最常用的是：  CALL_BLOCK: 适合调用无参或传参块callBlock: 可以调用带多个参数的块  例如：  sayHello: LOG: &quot;你好！&quot; windowCreated: CALL_BLOCK: sayHello     ","version":"Next","tagName":"h2"},{"title":"🌍 什么是全局变量（Globals）？​","type":1,"pageTitle":"🧠 Yuml 编程基础术语入门","url":"/docs/其他/basics#-什么是全局变量globals","content":" 全局变量就像是可以在任何地方使用的共享数据。 你定义一次，全应用都能访问。  定义：  \\&gt;user: &quot;Alice&quot;   使用：  LOG: &quot;当前用户：{&lt; user &gt;}&quot;   全局变量不仅能用于 LOG，也能被 Python/Lua 脚本访问（见 基本概念）    ","version":"Next","tagName":"h2"},{"title":"🔧 什么是元素？​","type":1,"pageTitle":"🧠 Yuml 编程基础术语入门","url":"/docs/其他/basics#-什么是元素","content":" Yuml 的每一行（除了块名）都叫做一个“元素”。  例如：  button: myBtn: show: true onClicked: hello   show 是一个通用元素，用于控制组件是否显示onClicked 是一个专有元素，用于响应按钮点击事件  详细请见 元素机制    ","version":"Next","tagName":"h2"},{"title":"🧠 小结​","type":1,"pageTitle":"🧠 Yuml 编程基础术语入门","url":"/docs/其他/basics#-小结","content":" 概念\t在 Yuml 中的形式\t用途变量\t\\&gt;a: 123\t存储数据 块（函数）\tmyFunc:\t封装逻辑 调用\tCALL_BLOCK: myFunc\t触发块运行 全局变量\t所有块共享变量\t跨块传值 元素\tLOG: &quot;abc&quot;\t单行执行语句或设置    如果你从未接触过编程，不用担心！ Yuml 的语法已经简化到了极致，只要你会写 YAML，就能快速上手。 继续阅读文档，一步步了解这个世界吧。 ","version":"Next","tagName":"h2"}],"options":{"languages":["zh","en"],"highlightResult":true,"maxHits":10,"indexBaseUrl":true,"fields":{"title":{"boost":200},"content":{"boost":2},"keywords":{"boost":100}},"id":"default"}}