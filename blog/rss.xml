<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Yuml Blog</title>
        <link>https://xYuan20d.github.io/blog</link>
        <description>Yuml Blog</description>
        <lastBuildDate>Tue, 01 Jul 2025 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>zh-Hans</language>
        <item>
            <title><![CDATA[✨ Yuml 架构升级：我们如何用 SQLite 实现 YAML 的惰性加载与编译执行]]></title>
            <link>https://xYuan20d.github.io/blog/updateYbc</link>
            <guid>https://xYuan20d.github.io/blog/updateYbc</guid>
            <pubDate>Tue, 01 Jul 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[Yuml 新版本引入了一项关键性的底层升级 ——]]></description>
            <content:encoded><![CDATA[<p>Yuml 新版本引入了一项关键性的底层升级 ——<br>
<!-- -->我们重新设计了解析执行的整个流程，<strong>告别重复渲染 + 全量加载的时代</strong>，正式迈入<strong>字节码 + 惰性加载的高性能阶段</strong>。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="-问题回顾旧架构的瓶颈">🧠 问题回顾：旧架构的瓶颈<a href="https://xyuan20d.github.io/blog/updateYbc#-%E9%97%AE%E9%A2%98%E5%9B%9E%E9%A1%BE%E6%97%A7%E6%9E%B6%E6%9E%84%E7%9A%84%E7%93%B6%E9%A2%88" class="hash-link" aria-label="🧠 问题回顾：旧架构的瓶颈的直接链接" title="🧠 问题回顾：旧架构的瓶颈的直接链接">​</a></h2>
<p>在旧版本中，Yuml 的启动流程如下：</p>
<ol>
<li>读取原始 <code>.yaml</code> 文件；</li>
<li>通过 <code>jinja2</code> 渲染模板逻辑；</li>
<li>使用 <code>ruamel.yaml</code> 解析 YAML；</li>
<li>将其转换为 <code>dict</code>，供解释器运行。</li>
</ol>
<p>虽然这种机制对小项目足够，但当 YAML 文件<strong>嵌套结构复杂、模块数量多时</strong>，以下问题显现：</p>
<ul>
<li>⏳ <strong>启动速度极慢</strong>：每次都重复执行 jinja2 + YAML 解析；</li>
<li>💥 <strong>内存占用剧增</strong>：全量 dict 加载会一次性占用大量内存；</li>
<li>🐌 <strong>性能与规模成反比</strong>：项目越大、越卡。</li>
</ul>
<p>于是，我们决定 —— <strong>动手重构运行核心</strong>。</p>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="-新架构ybc-字节码系统上线">✨ 新架构：ybc 字节码系统上线！<a href="https://xyuan20d.github.io/blog/updateYbc#-%E6%96%B0%E6%9E%B6%E6%9E%84ybc-%E5%AD%97%E8%8A%82%E7%A0%81%E7%B3%BB%E7%BB%9F%E4%B8%8A%E7%BA%BF" class="hash-link" aria-label="✨ 新架构：ybc 字节码系统上线！的直接链接" title="✨ 新架构：ybc 字节码系统上线！的直接链接">​</a></h2>
<p>我们设计了一种全新的运行机制：</p>
<blockquote>
<p><strong>将 YAML 编译为 SQLite 存储结构（ybc），按需访问执行内容。</strong></p>
</blockquote>
<p>你可以把 <code>.ybc</code> 理解为一个 <strong>结构化的键值数据库 + 字节码容器</strong>，它具备以下特性：</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-编译机制一次编译多次运行">🔥 编译机制（一次编译，多次运行）<a href="https://xyuan20d.github.io/blog/updateYbc#-%E7%BC%96%E8%AF%91%E6%9C%BA%E5%88%B6%E4%B8%80%E6%AC%A1%E7%BC%96%E8%AF%91%E5%A4%9A%E6%AC%A1%E8%BF%90%E8%A1%8C" class="hash-link" aria-label="🔥 编译机制（一次编译，多次运行）的直接链接" title="🔥 编译机制（一次编译，多次运行）的直接链接">​</a></h3>
<ul>
<li>首次构建时，将 <code>.yaml</code> 编译为 <code>.ybc</code> 文件；</li>
<li>编译过程中，完成模板渲染 + AST 提取 + SQLite 写入；</li>
<li>运行时，Yuml 直接读取 <code>.ybc</code>，<strong>不再解析 YAML 原文</strong>。</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="️-惰性加载用多少读多少">❄️ 惰性加载（用多少，读多少）<a href="https://xyuan20d.github.io/blog/updateYbc#%EF%B8%8F-%E6%83%B0%E6%80%A7%E5%8A%A0%E8%BD%BD%E7%94%A8%E5%A4%9A%E5%B0%91%E8%AF%BB%E5%A4%9A%E5%B0%91" class="hash-link" aria-label="❄️ 惰性加载（用多少，读多少）的直接链接" title="❄️ 惰性加载（用多少，读多少）的直接链接">​</a></h3>
<p>旧版会将整个 dict 一次性加载至内存，新版改为：</p>
<blockquote>
<p><strong>运行时只读取你访问的那个键值，而非整棵树。</strong></p>
</blockquote>
<p>这得益于 SQLite 的键值查找能力，我们可以做到：</p>
<ul>
<li>只加载需要的分支；</li>
<li><strong>动态、低成本地解析执行逻辑</strong>；</li>
<li>大幅节省内存（实测内存占用下降 80%+）；</li>
</ul>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="-示例对比旧-vs-新">🧪 示例对比：旧 vs 新<a href="https://xyuan20d.github.io/blog/updateYbc#-%E7%A4%BA%E4%BE%8B%E5%AF%B9%E6%AF%94%E6%97%A7-vs-%E6%96%B0" class="hash-link" aria-label="🧪 示例对比：旧 vs 新的直接链接" title="🧪 示例对比：旧 vs 新的直接链接">​</a></h2>
<table><thead><tr><th>项目</th><th>YAML 行数</th><th>启动时间（旧）</th><th>启动时间（新）</th><th>内存占用</th></tr></thead><tbody><tr><td>小项目</td><td>300 行</td><td>200ms</td><td>60ms</td><td>30MB → 10MB</td></tr><tr><td>中型项目</td><td>2000 行</td><td>1.4s</td><td>0.4s</td><td>120MB → 25MB</td></tr><tr><td>超大项目</td><td>&gt;1w 行</td><td>无法启动💥</td><td>1.1s</td><td>❌ → 40MB</td></tr></tbody></table>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="️-双模式支持开发--部署都方便">🛠️ 双模式支持：开发 &amp; 部署都方便<a href="https://xyuan20d.github.io/blog/updateYbc#%EF%B8%8F-%E5%8F%8C%E6%A8%A1%E5%BC%8F%E6%94%AF%E6%8C%81%E5%BC%80%E5%8F%91--%E9%83%A8%E7%BD%B2%E9%83%BD%E6%96%B9%E4%BE%BF" class="hash-link" aria-label="🛠️ 双模式支持：开发 &amp; 部署都方便的直接链接" title="🛠️ 双模式支持：开发 &amp; 部署都方便的直接链接">​</a></h2>
<p>为了兼顾开发体验与部署性能，新版本保留两种运行方式：</p>
<table><thead><tr><th>模式</th><th>描述</th><th>推荐用途</th></tr></thead><tbody><tr><td><code>.yaml</code> 直跑</td><td>保留解释器动态性</td><td>快速调试、开发阶段</td></tr><tr><td><code>.ybc</code> 编译运行</td><td>结构化 + 惰性</td><td>部署上线、追求性能场景</td></tr></tbody></table>
<p>配套命令行（CLI）也提供完整支持：</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># 编译 YAML 为字节码</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">yuml compile ./main.yaml</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 运行字节码（无需 YAML 源文件）</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">yuml run ./main.ybc</span><br></span></code></pre></div></div>]]></content:encoded>
            <category>Yuml</category>
        </item>
        <item>
            <title><![CDATA[第一条帖子]]></title>
            <link>https://xYuan20d.github.io/blog/post1</link>
            <guid>https://xYuan20d.github.io/blog/post1</guid>
            <pubDate>Sun, 22 Jun 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[✨ 欢迎来到本站的第一篇帖子！🎉]]></description>
            <content:encoded><![CDATA[<p>✨ 欢迎来到本站的第一篇帖子！🎉</p>
<p>如果你不嫌麻烦，欢迎点击右下方的「💬」按钮 👉<br>
<!-- -->登录一下，留言「到此一游」，让我知道你来过</p>
<p>Ciallo～(∠・ω&lt; )⌒★</p>]]></content:encoded>
            <category>Hello</category>
        </item>
    </channel>
</rss>