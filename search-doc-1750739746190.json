{"searchDocs":[{"title":"第一条帖子","type":0,"sectionRef":"#","url":"/blog/post1","content":"✨ 欢迎来到本站的第一篇帖子！🎉 如果你不嫌麻烦，欢迎翻到页面最底部，点击「显示评论」按钮 👉 登录一下，留言「到此一游」，让我知道你来过","keywords":"","version":null},{"title":"📦 安装 Yuml","type":0,"sectionRef":"#","url":"/docs/install","content":"","keywords":"","version":"Next"},{"title":"使用 Git 克隆安装​","type":1,"pageTitle":"📦 安装 Yuml","url":"/docs/install#使用-git-克隆安装","content":" Yuml 当前仍处于测试阶段，尚未发布至 PyPI，建议通过 Git 克隆源代码来使用：  ","version":"Next","tagName":"h2"},{"title":"克隆仓库​","type":1,"pageTitle":"📦 安装 Yuml","url":"/docs/install#克隆仓库","content":" git clone https://github.com/xYuan20d/Yuml.git cd Yuml   ","version":"Next","tagName":"h3"},{"title":"安装依赖​","type":1,"pageTitle":"📦 安装 Yuml","url":"/docs/install#安装依赖","content":" pip install -r requirements.txt   警告 请确保你已安装 Python 3.10 或以上版本。 ","version":"Next","tagName":"h3"},{"title":"Yuml简介","type":0,"sectionRef":"#","url":"/docs/intro","content":"","keywords":"","version":"Next"},{"title":"🧠 什么是 Yuml？​","type":1,"pageTitle":"Yuml简介","url":"/docs/intro#-什么是-yuml","content":" Yuml 是一个基于 YAML 语法结构构建的声明式 UI 和元编程语言，它的设计理念是：  摆脱 HTML + JS 的限制，实现全平台可嵌入的数据交互式编程体验  类似 XML/HTML 的结构，但具备控制流、模块系统、动态表达式等能力。既可以用来写页面 UI，也可以作为逻辑脚本语言运行。支持 Python、Lua 的无缝嵌入，也能完全脱离传统语言独立运行。  ","version":"Next","tagName":"h2"},{"title":"🔥 特点一览​","type":1,"pageTitle":"Yuml简介","url":"/docs/intro#-特点一览","content":" ✅ 事件驱动编程✅ 模块系统（可导入依赖包和组件）✅ 全局变量、作用域、数据绑定机制✅ 字符串模板渲染（{&lt; &gt;} / {&lt;&lt; &gt;&gt;} 支持表达式嵌入）✅ 插件化机制，支持扩展组件、拖拽式可视化编辑✅ 支持控制流（if / for / break / continue）✅ 自定义语法指令  ","version":"Next","tagName":"h2"},{"title":"简单示例​","type":1,"pageTitle":"Yuml简介","url":"/docs/intro#简单示例","content":" 你可以像写 YAML 一样写 UI 元素，也可以写函数、变量、模块：  run: \\&gt;hello_world: &quot;Hello World!&quot; LOG: &quot;{&lt; hello_world &gt;}&quot; # 输出Hello World!  ","version":"Next","tagName":"h2"},{"title":"根节点与事件机制","type":0,"sectionRef":"#","url":"/docs/使用教程/events","content":"","keywords":"","version":"Next"},{"title":"📦 什么是块(函数)​","type":1,"pageTitle":"根节点与事件机制","url":"/docs/使用教程/events#-什么是块函数","content":" Yuml 并没有使用传统的 function 或 def 关键词来声明函数。 相反，它通过 根级块名 与事件名是否重名来判断一个块是：  事件块（系统自动调用）自定义块（用户手动调用）  ","version":"Next","tagName":"h2"},{"title":"✨ 示例​","type":1,"pageTitle":"根节点与事件机制","url":"/docs/使用教程/events#-示例","content":" windowCreated: windowSize: {width: 800, height: 600} CALL_BLOCK: testBlock testBlock: LOG: &quot;块被调用&quot;   windowCreated 是一个与事件同名的块 → 事件块  testBlock 是一个普通块，不与任何事件重名 → 自定义块  提示 避免将自定义块命名为上述事件名，否则它将被视为系统事件块。 自定义块可以被 callBlock/CALL_BLOCK 等元素调用，用于组织业务逻辑。    ⚙️ 常见事件块（自动触发）  事件名 触发时机 windowCreated 当窗口首次 show 时触发 windowShowed 当窗口被显示时触发 windowHidden 当窗口被隐藏时触发 windowResized 当窗口尺寸发生变化时触发 windowMoved 当窗口被移动时触发 windowClosed 当用户关闭窗口时触发（点击关闭按钮）  这些事件块的结构和普通块没有区别，只是由系统自动调用，不需要手动执行。    待更新    ","version":"Next","tagName":"h3"},{"title":"✅ 优化说明：​","type":1,"pageTitle":"根节点与事件机制","url":"/docs/使用教程/events#-优化说明","content":" 段落更清晰，结构更分明（介绍 → 判断 → 表格 → 示例）；加入表格展示事件更清楚；专业术语保持统一：块（Block）、根节点（Root）、事件块、自定义块；增加友好的说明和小贴士，适合 Docusaurus 文档风格；加入了代码高亮和示例说明，易读性更强。 ","version":"Next","tagName":"h3"},{"title":"Yuml 独有的基本概念","type":0,"sectionRef":"#","url":"/docs/使用教程/concept","content":"","keywords":"","version":"Next"},{"title":"1. 块（Block）与元素（Element）​","type":1,"pageTitle":"Yuml 独有的基本概念","url":"/docs/使用教程/concept#1-块block与元素element","content":" 在 Yuml 中，每个根节点（Root）下都是一个“块”（Block）。块是 Yuml 的基本代码结构单元，用于封装逻辑、组件或数据内容。  ","version":"Next","tagName":"h2"},{"title":"示例​","type":1,"pageTitle":"Yuml 独有的基本概念","url":"/docs/使用教程/concept#示例","content":" a: _: 1 b: _: 1 _2: 1   • 上例中，a 和 b 都是块，分别称为「a 块」和「b 块」。  • 每个块中的键值对称为元素（Element）。  • a 块中包含一个元素：_，值为 1。  • b 块中包含两个元素：_ 和 _2，值均为 1。  ","version":"Next","tagName":"h3"},{"title":"2. 组件元素​","type":1,"pageTitle":"Yuml 独有的基本概念","url":"/docs/使用教程/concept#2-组件元素","content":" 待更新 ","version":"Next","tagName":"h2"},{"title":"Jinja2支持","type":0,"sectionRef":"#","url":"/docs/其他/jinja2","content":"","keywords":"","version":"Next"},{"title":"🧠 为什么用 Jinja2？​","type":1,"pageTitle":"Jinja2支持","url":"/docs/其他/jinja2#-为什么用-jinja2","content":" Yuml 是声明式的语言，但并不意味着要放弃灵活性。  借助 Jinja2，你可以在静态结构中加入：  条件判断 ({% if %} / {% else %})循环语句 ({% for %})变量替换 ({{ variable }})宏函数 / include 等模板技巧    ","version":"Next","tagName":"h2"},{"title":"✨ 支持语法示例​","type":1,"pageTitle":"Jinja2支持","url":"/docs/其他/jinja2#-支持语法示例","content":" ; 会根据变量生成不同的内容 {% set show_button = true %} {{ 'BUTTON:' ~ '确认' if show_button else '提示' }} {% for i in range(3) %} LOG: 第 {{ i }} 次执行 {% endfor %}  ","version":"Next","tagName":"h2"},{"title":"Yuml Python API 简介","type":0,"sectionRef":"#","url":"/docs/使用教程/python_api","content":"","keywords":"","version":"Next"},{"title":"主要 API​","type":1,"pageTitle":"Yuml Python API 简介","url":"/docs/使用教程/python_api#主要-api","content":" ","version":"Next","tagName":"h2"},{"title":"类 LoadYmlFile​","type":1,"pageTitle":"Yuml Python API 简介","url":"/docs/使用教程/python_api#类-loadymlfile","content":" LoadYmlFile( file_name: str, # Yuml 文件路径 app: QApplication, # Qt 应用实例 load_str: bool = False, # 是否加载字符串内容，默认 False is_module: bool = False, # 是否作为模块加载，默认 False _p: QWidget | None = None # 父窗口指针，默认 None )   ","version":"Next","tagName":"h3"},{"title":"示例​","type":1,"pageTitle":"Yuml Python API 简介","url":"/docs/使用教程/python_api#示例","content":" from PySide6.QtWidgets import QApplication from os import environ environ[&quot;__YuQt_WindowStyle&quot;] = &quot;YW_root&quot; # 设置窗口样式，必须在导入 Yuml 之前 from YUML.Yuml import LoadYmlFile app = QApplication([]) # 加载 Yuml 文件，启动应用 LoadYmlFile(&quot;main.yaml&quot;, app) app.exec()  ","version":"Next","tagName":"h3"}],"options":{"languages":["zh","en"],"highlightResult":true,"maxHits":10,"indexBaseUrl":true,"fields":{"title":{"boost":200},"content":{"boost":2},"keywords":{"boost":100}},"id":"default"}}